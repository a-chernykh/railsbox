---
- name: 'Set postgresql key'
  apt_key: id=ACCC4CF8 url=https://www.postgresql.org/media/keys/ACCC4CF8.asc state=present

- name: Set repo for Debian Wheezy
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ wheezy-pgdg main' update_cache=yes state=present
  when: os_name == 'mokote/debian-7'
  
- name: Set repo for Ubuntu Trusty
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main' update_cache=yes state=present
  when: os_name == 'ubuntu/trusty32' or os_name == 'ubuntu/trusty64'

- name: Set repo for Ubuntu Precise
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main' update_cache=yes state=present
  when: os_name == 'ubuntu/precise64' or os_name == 'ubuntu/precise64'

- name: Install the version 9.x of postgresql and packages
  apt: name={{ item }} state=present
  with_items:
    - libpq-dev
    - 'postgresql-{{ postgresql_version }}'
    - 'postgresql-contrib-{{ postgresql_version }}'
    - python-pip
    - python-dev

- name: Configure PostgreSQL - postgresql.conf
  template: src=postgresql.conf.j2 dest=/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
  notify: restart postgresql

- name: Configure PostgreSQL - pg_hba.conf
  template: src=pg_hba.conf.j2 dest=/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
  notify: restart postgresql

- name: Install required Python modules
  pip: name=psycopg2

- name: Create postgresql user
  postgresql_user: name={{ postgresql_db_user }} password={{ postgresql_db_password }} role_attr_flags=CREATEDB,SUPERUSER,CREATEROLE
  sudo_user: postgres

- name: Create postgresql database
  postgresql_db: name={{ postgresql_db_name }} owner={{ postgresql_db_user }}
  sudo_user: postgres

- name: Create config/database.yml
  template: src=database.yml.j2 dest={{ app_config_path }}/database.yml owner={{ user_name }} mode=0600 backup=yes
  when: postgresql_orm in ['activerecord', 'sequel', 'datamapper']

- name: Make sure the postgis extensions are installed
  apt: name={{ item }}
  with_items:
    - libgeos-c1
    - 'postgresql-{{ postgresql_version }}-postgis-{{ postgresql_ext_postgis_version }}'
  notify: restart postgresql
  when: "postgresql_extensions and 'postgis' in postgresql_extensions"

- name: Create extensions
  sudo_user: '{{ postgresql_admin_user }}'
  shell: "psql {{ postgresql_db_name }} -c 'CREATE EXTENSION IF NOT EXISTS {{ item }};'"
  with_items: postgresql_extensions
  when: postgresql_extensions
